/**
 * @file kalman_test.cpp
 * @author Arthur Gay <arthur.gay@epfl.ch>
 */

#include "kalman_test.h"
#include "../target_tracking/Kalman.hpp"
#include "utils.h"

#include <unit_test/unit_test.h>
#include <matrix/math.hpp>

#define FLOAT_PRECISION 5

class KalmanTest : public UnitTest
{
public:
	KalmanTest();
	virtual ~KalmanTest();

	virtual bool run_tests();

private:
	bool kalman_init_test();
	bool compute_matrix_A_test();
	bool compute_matrix_B_test();
	bool compute_phi_test();
	bool compute_q_test();

	bool predict_x_test();
	bool predict_phi_test();


	bool compute_kalman_gain_test();
	bool compute_state_estimation_test();
	bool compute_state_covariance_estimation_test();
};

KalmanTest::KalmanTest() {
}

KalmanTest::~KalmanTest() {
}

bool KalmanTest::kalman_init_test()
{
	const int M = 6;
	const int N = 3;
	KalmanFilter<M, N> kf;
	matrix::SquareMatrix<float, M> f;
	f(0, 3) = 1.0f;
	f(1, 4) = 1.0f;
	f(2, 5) = 1.0f;
	matrix::Matrix<float, N, M> h;
	h(0, 0) = 1.0f;
	h(1, 1) = 1.0f;
	h(2, 2) = 1.0f;
	float x0_data[] = {-6.683f,-4.711f,2.276f,8.607f,-9.455f,-9.374f};
	matrix::Vector<float, M> x0(x0_data);
	matrix::Vector<float, M> p0;
	p0.setOne();
	p0 *= 5;

	matrix::Vector<float, M> w;
	w(0) = .473;
	w(1) = .348;
	w(2) = .678;
	w(3) = .337;
	w(4) = .371;
	w(5) = .288;

	float dt = 0.5f;

	kf.init(f, w, h, x0, p0, dt);

	float expected_h_data[N][M] = {
			{1,0,0,0,0,0},
			{0,1,0,0,0,0},
			{0,0,1,0,0,0},
		};

	compare_matrix("measurement matrix",
		(matrix::Matrix<float, N, M>(expected_h_data)),
		kf._h, N, M, FLOAT_PRECISION);


	ut_compare_float("dt", dt, kf._dt, FLOAT_PRECISION);

	float expected_f_data[M][M] = {
		{0,0,0,1,0,0},
		{0,0,0,0,1,0},
		{0,0,0,0,0,1},
		{0,0,0,0,0,0},
		{0,0,0,0,0,0},
		{0,0,0,0,0,0},
	};
	compare_matrix("dynamic matrix", (matrix::Matrix<float, M, M>(expected_f_data)),
		kf._f,
		M, M, FLOAT_PRECISION);

	compare_vectors("_x0", x0, kf._x, M, FLOAT_PRECISION);

	float expected_p_data [M][M] = {
		{25,0,0,0,0,0,},
		{0,25,0,0,0,0,},
		{0,0,25,0,0,0,},
		{0,0,0,25,0,0,},
		{0,0,0,0,25,0,},
		{0,0,0,0,0,25,},
	};
	compare_matrix("dynamic matrix", (matrix::Matrix<float, M, M>(expected_p_data)),
		kf._p,
		M, M, FLOAT_PRECISION);


	return true;
}

bool KalmanTest::compute_matrix_A_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;

	float w_data[M] = {6.824,9.370,5.881,3.657,1.724,8.597};
	float f_data[M][M] = {
		{.93830,1.08860,1.27770,1.69150,.77930,1.83350},
		{1.52900,.67190,.67880,1.45750,.30610,1.64980},
		{1.47460,.79850,1.81680,1.04400,.14250,1.49400},
		{1.83010,.40830,.22740,1.93260,.53630,5370},
		{1.16750,.87650,.56100,.40720,1.92760,1.56320},
		{1.25410,.89850,.11120,1.56650,1.13080,.72850},
	};
	const matrix::Vector<float, M> w(w_data);
	const matrix::SquareMatrix<float, M> f(f_data);
	const float dt = 0.5;

	float expected_data[2*M][2*M] = {
		{-0.469150, -0.544300, -0.638850, -0.845750, -0.389650, -0.916750, 23.283487, 0.000000,  0.000000, 0.000000,    0.000000,  0.000000,},
		{-0.764500, -0.335950, -0.339400, -0.728750, -0.153050, -0.824900,  0.000000, 43.898449, 0.000000, 0.000000,    0.000000,  0.000000,},
		{-0.737300, -0.399250, -0.908400, -0.522000, -0.071250, -0.747000,  0.000000, 0.000000, 17.293081, 0.000000,    0.000000,  0.000000,},
		{-0.915050, -0.204150, -0.113700, -0.966300, -0.268150, -2685.00,   0.000000, 0.000000,  0.000000, 6.686825,    0.000000,  0.000000,},
		{-0.583750, -0.438250, -0.280500, -0.203600, -0.963800, -0.781600,  0.000000, 0.000000,  0.000000, 0.000000,    1.486088,  0.000000,},
		{-0.627050, -0.449250, -0.055600, -0.783250, -0.565400, -0.364250,  0.000000, 0.000000,  0.000000, 0.000000,    0.000000, 36.954205,},
		{0.000000,   0.000000,   0.000000, 0.000000,  0.000000, 0.000000,   0.469150, 0.764500,  0.737300, 0.915050,    0.583750,  0.627050,},
		{0.000000,   0.000000,   0.000000, 0.000000,  0.000000, 0.000000,   0.544300, 0.335950,  0.399250, 0.204150,    0.438250,  0.449250,},
		{0.000000,   0.000000,   0.000000, 0.000000,  0.000000, 0.000000,   0.638850, 0.339400,  0.908400, 0.113700,    0.280500,  0.055600,},
		{0.000000,   0.000000,   0.000000, 0.000000,  0.000000, 0.000000,   0.845750, 0.728750,  0.522000, 0.966300,    0.203600,  0.783250,},
		{0.000000,   0.000000,   0.000000, 0.000000,  0.000000, 0.000000,   0.389650, 0.153050,  0.071250, 0.268150,    0.963800,  0.565400,},
		{0.000000,   0.000000,   0.000000, 0.000000,  0.000000, 0.000000,   0.916750, 0.824900,  0.747000, 2685.000000, 0.781600,  0.364250,},
	};
	matrix::SquareMatrix<float, 2 * M> expected(expected_data);

	matrix::SquareMatrix<float, 2 * M> A = kf.compute_matrix_A(w, f, dt);

	compare_matrix("A", expected, A, 2*M, 2*M, FLOAT_PRECISION);
	return true;
}
bool KalmanTest::compute_matrix_B_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;
	// random input
	float a_data[2*M][2*M]={
		{0.84019,0.39438,0.78310,0.79844,0.91165,0.19755,0.33522,0.76823,0.27777,0.55397,0.47740,0.62887},
		{0.70098,0.80968,0.08880,0.12148,0.34831,0.42196,0.69981,0.06638,0.58748,0.64297,0.99060,0.29572},
		{0.56138,0.22498,0.39309,0.44394,0.28504,0.14478,0.56355,0.86468,0.89540,0.23080,0.00401,0.46058},
		{0.91646,0.13398,0.19121,0.26008,0.21428,0.36016,0.41980,0.65408,0.19437,0.30973,0.50687,0.11467},
		{0.27475,0.04647,0.99276,0.08003,0.14769,0.07964,0.28057,0.44846,0.49825,0.89400,0.01567,0.27465},
		{0.13544,0.96252,0.79973,0.40301,0.08513,0.80563,0.64516,0.24740,0.30989,0.98312,0.52966,0.94383},
		{0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,}
	};
	matrix::SquareMatrix<float, 2 * M> A (a_data);

	float expected_data[2*M][2*M] = {
		{13656.609375,8863.844727,12134.65918,8774.107422,8662.079102,6627.499512,10678.095703,12518.439453,10652.232422,12597.138672,8937.213867,10079.662109,},
		{10070.702148,6538.828613,8948.473633,6470.222656,6387.811523,4888.100098,7875.425781,9231.230469,7856.108398,9290.522461,6592.001953,7433.506348,},
		{7679.063477,4984.459473,6824.583984,4933.978027,4870.753418,3726.902588,6004.993164,7039.909668,5990.770996,7083.630371,5025.450195,5668.22998,},
		{8803.556641,5714.214844,7822.453613,5657.196777,5583.84375,4272.797852,6883.927734,8070.227051,6866.949707,8120.852539,5761.76709,6497.821777,},
		{5453.400879,3539.727783,4846.73291,3503.857178,3460.069092,2646.708496,4264.581543,4999.622559,4254.617676,5031.328613,3568.835205,4025.496094,},
		{11937.849609,7750.604492,10608.712891,7670.477051,7572.040527,5796.208984,9336.149414,10943.573242,9313.02832,11013.875,7814.060059,8812.895508,},
		{0,0,0,0,0,0,1,0,0,0,0,0,},
		{0,0,0,0,0,0,0,1,0,0,0,0,},
		{0,0,0,0,0,0,0,0,1,0,0,0,},
		{0,0,0,0,0,0,0,0,0,1,0,0,},
		{0,0,0,0,0,0,0,0,0,0,1,0,},
		{0,0,0,0,0,0,0,0,0,0,0,1,},
	};
	matrix::SquareMatrix<float, 2 * M> expected (expected_data);

	matrix::SquareMatrix<float, 2 * M> B = kf.compute_matrix_B(A);

	compare_matrix("B", expected, B, 2*M, 2*M, FLOAT_PRECISION);

	return true;
}
bool KalmanTest::compute_phi_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;

	float b_data[M*2][M*2] = {
		{0,0,0,0,0,0,1,0,0,0,0,0,},
		{0,0,0,0,0,0,0,1,0,0,0,0,},
		{0,0,0,0,0,0,0,0,1,0,0,0,},
		{0,0,0,0,0,0,0,0,0,1,0,0,},
		{0,0,0,0,0,0,0,0,0,0,1,0,},
		{0,0,0,0,0,0,0,0,0,0,0,1,},
		{13656.609375,8863.844727,12134.65918,8774.107422,8662.079102,6627.499512,10678.095703,12518.439453,10652.232422,12597.138672,8937.213867,10079.662109,},
		{10070.702148,6538.828613,8948.473633,6470.222656,6387.811523,4888.100098,7875.425781,9231.230469,7856.108398,9290.522461,6592.001953,7433.506348,},
		{7679.063477,4984.459473,6824.583984,4933.978027,4870.753418,3726.902588,6004.993164,7039.909668,5990.770996,7083.630371,5025.450195,5668.22998,},
		{8803.556641,5714.214844,7822.453613,5657.196777,5583.84375,4272.797852,6883.927734,8070.227051,6866.949707,8120.852539,5761.76709,6497.821777,},
		{5453.400879,3539.727783,4846.73291,3503.857178,3460.069092,2646.708496,4264.581543,4999.622559,4254.617676,5031.328613,3568.835205,4025.496094,},
		{11937.849609,7750.604492,10608.712891,7670.477051,7572.040527,5796.208984,9336.149414,10943.573242,9313.02832,11013.875,7814.060059,8812.895508,},
	};
	matrix::SquareMatrix<float, 2 * M> B(b_data);

	float expected_data[M][M] = {
		{10678.095703, 7875.425781, 6004.993164, 6883.927734, 4264.581543, 9336.149414, },
		{12518.439453, 9231.230469, 7039.909668, 8070.227051, 4999.622559, 10943.573242, },
		{10652.232422, 7856.108398, 5990.770996, 6866.949707, 4254.617676, 9313.02832, },
		{12597.138672, 9290.522461, 7083.630371, 8120.852539, 5031.328613, 11013.875, },
		{8937.213867, 6592.001953, 5025.450195, 5761.76709, 3568.835205, 7814.060059, },
		{10079.662109, 7433.506348, 5668.22998, 6497.821777, 4025.496094, 8812.895508, },
	};
	matrix::SquareMatrix<float, M> expected(expected_data);

	matrix::SquareMatrix<float, M> result = kf.compute_phi(B);

	compare_matrix("phi", expected, result, M, M, FLOAT_PRECISION);

	return true;
}
bool KalmanTest::compute_q_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;

	float b_data[2*M][2*M] = {
		{13656.609375,8863.844727,12134.65918,8774.107422,8662.079102,6627.499512,10678.095703,12518.439453,10652.232422,12597.138672,8937.213867,10079.662109,},
		{10070.702148,6538.828613,8948.473633,6470.222656,6387.811523,4888.100098,7875.425781,9231.230469,7856.108398,9290.522461,6592.001953,7433.506348,},
		{7679.063477,4984.459473,6824.583984,4933.978027,4870.753418,3726.902588,6004.993164,7039.909668,5990.770996,7083.630371,5025.450195,5668.22998,},
		{8803.556641,5714.214844,7822.453613,5657.196777,5583.84375,4272.797852,6883.927734,8070.227051,6866.949707,8120.852539,5761.76709,6497.821777,},
		{5453.400879,3539.727783,4846.73291,3503.857178,3460.069092,2646.708496,4264.581543,4999.622559,4254.617676,5031.328613,3568.835205,4025.496094,},
		{11937.849609,7750.604492,10608.712891,7670.477051,7572.040527,5796.208984,9336.149414,10943.573242,9313.02832,11013.875,7814.060059,8812.895508,},
		{0,0,0,0,0,0,1,0,0,0,0,0,},
		{0,0,0,0,0,0,0,5,0,0,0,0,},
		{0,0,0,0,0,0,0,0,1,0,0,0,},
		{0,0,0,0,0,0,0,0,0,1,0,0,},
		{0,0,0,0,0,0,0,0,0,0,8,0,},
		{0,0,0,0,0,0,0,0,0,0,0,1,},
	};
	matrix::SquareMatrix<float, 2 * M>  B(b_data);
	float phi_data[M][M] = {
		{1,0,0,0,0,0,},
		{0,5,0,0,0,0,},
		{0,0,1,0,0,0,},
		{0,0,0,1,0,0,},
		{0,0,0,0,8,0,},
		{0,0,0,0,0,1,},
	};
	matrix::SquareMatrix<float, M> phi(phi_data);

	float expected_data[M][M] = {
		{10678.095703, 12518.439453, 10652.232422, 12597.138672,  8937.213867, 10079.662109, },
		{39377.128906, 46156.152344, 39280.542969, 46452.613281, 32960.007812, 37167.531250, },
		{ 6004.993164,  7039.909668,  5990.770996,  7083.630371,  5025.450195,  5668.229980, },
		{ 6883.927734,  8070.227051,  6866.949707,  8120.852539,  5761.767090,  6497.821777, },
		{34116.652344, 39996.980469, 34036.941406, 40250.628906, 28550.681641, 32203.968750, },
		{ 9336.149414, 10943.573242,  9313.028320, 11013.875000,  7814.060059,  8812.895508, },
	};
	matrix::SquareMatrix<float, M> expected(expected_data);

	matrix::SquareMatrix<float, M> result = kf.compute_q(B, phi);

	compare_matrix("q", expected, result, M, M, FLOAT_PRECISION);

	return true;
}

bool KalmanTest::predict_x_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;

	float phi_data[M][M] = {
		{.93830,1.08860,1.27770,1.69150,.77930,1.83350},
		{1.52900,.67190,.67880,1.45750,.30610,1.64980},
		{1.47460,.79850,1.81680,1.04400,.14250,1.49400},
		{1.83010,.40830,.22740,1.93260,.53630,5370},
		{1.16750,.87650,.56100,.40720,1.92760,1.56320},
		{1.25410,.89850,.11120,1.56650,1.13080,.72850},
	};
	matrix::SquareMatrix<float, M> phi(phi_data);
	float x_data[M] = {2.33500,1.75300,1.12200,.81440,3.85520,3.12640};
	matrix::Vector<float, M> x(x_data);

	float expected_data[M] = {15.646996,13.034668,12.951851,16797.652344,17.542154,12.54096};
	matrix::Vector<float, M> expected(expected_data);

	matrix::Vector<float, M> result_x = kf.predict_x(phi, x);

	compare_vectors("predicted x", expected, result_x, M, FLOAT_PRECISION);
	return true;
}

bool KalmanTest::predict_phi_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;

	float phi_data[M][M] = {
		{.90530,1.42270,1.81900,.88630,.63820,7740},
		{.87150,1.39890,410,1.45530,1.99370,1.79120},
		{1.99740,.63480,1.35100,2260,.83260,1.47680},
		{1.37610,1.70640,1.16530,1.51330,1.48830,.16600},
		{1.06130,.42020,1.21400,.91190,1.81940,.67750},
		{.45500,.10590,.30930,1.95810,.44680,1.24200},
	};
	matrix::SquareMatrix<float, M> phi(phi_data);

	float q_data[M][M] = {
		{.85980,.38700,1.98550,1.88470,1.34760,1.15980},
		{.91560,.40400,.30270,1.14080,1.73410,.42830},
		{1.66800,1.60580,.89280,.49370,1.62450,.20600},
		{.54060,.59970,1.69370,.19470,1.26440,.46530},
		{.80110,.55560,.10780,1.78200,1.17650,1.79100},
		{1.43400,.14430,.42620,1.54490,.90790,1.79220},
	};
	matrix::SquareMatrix<float, M> q(q_data);

	float p_data[M][M] = {
		{1.17990,110,.60600,1.95430,.19000,1.21930},
		{9330,1.35250,.18650,.58630,1.10210,.79430},
		{.58370,.17620,1.88920,1.11350,.76570,1.74990},
		{.89310,.68490,.76410,.12350,.12560,1.71290},
		{1.90380,1.88260,.60790,1.88980,1.68000,1.63870},
		{1.17820,1.07450,1.07130,1.42680,.62900,.26090},
	};
	matrix::SquareMatrix<float, M> p(p_data);

	float expected_data[M][M] = {
		{15751917,3462568,25039934,79169.421875,57697.445312,39980.8125,},
		{5632484,334091.71875,1081237.125,20813.972656,16636.023438,8267.692383,},
		{30030636,727810.4375,677478,17489.419922,14699.719727,9850.543945,},
		{93201.273438,16436.916016,50528.191406,22216.648438,17003.128906,7297.191895,},
		{69327.328125,5904.787598,26455.878906,5643.103027,4250.211426,1832.350342,},
		{44258.601562,2592.129395,11421.088867,1474.668701,1093.627197,476.520721,},
	};
	matrix::SquareMatrix<float, M> expected(expected_data);

	matrix::SquareMatrix<float, M> result = kf.predict_p(phi, q, p);

	compare_matrix("predicted x", expected, result, M, M, FLOAT_PRECISION);
	return true;
}

bool KalmanTest::compute_kalman_gain_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;

	float h_data[N][M] = {
		{1.1799,11,.606,1.9543,.19,1.21930},
		{933,1.3525,.1865,.5863,1.1021,.79430},
		{.5837,.1762,1.8892,1.1135,.7657,1.74990},
	};
	const matrix::Matrix<float, N, M> h(h_data);
	float p_data[M][M] = {
		{11.423,9.494,9.397,8.845,3.403,9.095},
		{11.170,1.778,10.386,5.521,4.748,3.751},
		{15.303,18.165,.848,16.477,4.769,18.990},
		{8.249,9.948,.537,11.348,11.477,.935},
		{7.398,9.325,14.810,17.451,9.682,14.314},
		{9.175,9.109,2.288,14.722,14.133,15.571},
	};
	const matrix::SquareMatrix<float, M> p(p_data);
	float r_data[N][N] = {
		{11.423,9.494,9.397},
		{11.170,1.778,10.386},
		{15.303,18.165,.848},
	};
	const matrix::SquareMatrix<float, N> r(r_data);

	float expected_data[M][N] = {
		{-0.00079,0.001096,-0.002390,},
		{0.103101,-0.000498,-0.021599,},
		{-0.232290,0.007967,-0.429048,},
		{-0.202486,0.007041,-0.463169,},
		{0.465485,-0.017050,1.584878,},
		{0.182124,-0.006316,0.656490,},
	};
	const matrix::Matrix<float, M, N> expected(expected_data);

	const matrix::Matrix<float, M, N> result = kf.compute_kalman_gain(h, p, r);

	compare_matrix("kalman gain", expected, result, M, N, FLOAT_PRECISION);

	return true;
}
bool KalmanTest::compute_state_estimation_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;

	float x_data[M] = {11.780,6.531,9.626,18.268,2.852,13.102};
	const matrix::Vector<float, M> x(x_data);
	float z_data[N] = {.816,9.779,14.540,};
	const matrix::Vector<float, N> z(z_data);
	float k_data[M][N] = {
		{15.578,6.440,16.866},
		{5.580,1.835,2.344},
		{14.842,4.974,17.305},
		{14.587,15.314,14.528},
		{3.458,19.483,2.545},
		{1.454,19.402,13.340},
	};
	const matrix::Matrix<float, M, N> k(k_data);
	float h_data[N][M] = {
		{13.199,5.187,4.783,14.911,17.724,17.979},
		{5.652,5.699,9.780,13.880,3.586,5.755},
		{15.103,.750,6.587,12.889,9.491,8.748},
	};
	const matrix::Matrix<float, N, M> h(h_data);

	float expected_data[M] = {-26007.462891,-6813.673340,-24920.076172,-28471.337891,-14563.517578,-19493.402344,};
	const matrix::Vector<float, M> expected(expected_data);

	const matrix::Vector<float, M> result = kf.compute_state_estimation(x, z, k, h);

	compare_vectors("state estimation", expected, result, M, FLOAT_PRECISION);

	return true;
}

bool KalmanTest::compute_state_covariance_estimation_test()
{
	const int M = 6, N = 3;
	KalmanFilter<M, N> kf;

	float p_data[M][M] = {
		{11.278,13.011,16.221,3.074,11.239,4.322},
		{.561,6.510,17.875,.422,4.687,3.146},
		{6.536,8.230,1.528,7.385,11.066,19.398},
		{8.292,14.815,10.822,5.146,11.451,6.285},
		{6.170,11.536,3.248,11.212,2.637,12.415},
		{13.982,10.036,5.854,11.841,7.205,.474},
	};
	const matrix::SquareMatrix<float, M> p(p_data);
	float k_data[M][N] = {
		{6.115,17.577,11.557},
		{15.951,19.650,7.610},
		{9.064,7.160,19.867},
		{3.081,6.265,5.790},
		{13.136,7.229,11.122},
		{7.541,17.799,16.959},
	};
	const matrix::Matrix<float, M, N> k(k_data);
	float  h_data[N][M] = {
		{16.288,13.755,2.378,8.056,11.604,2.014},
		{11.521,11.745,14.430,16.304,18.101,3.749},
		{.321,1.576,11.873,15.986,3.749,1.176},
	};
	const matrix::Matrix<float, N, M> h(h_data);

	float expected_data[M][M] = {
		{-14529.083008,-22934.972656,-18658.878906,-12675.714844,-17122.160156,-18836.863281,},
		{-18309.156250,-28920.927734,-25494.345703,-15415.808594,-21071.892578,-22259.710938,},
		{-12225.634766,-19371.953125,-15573.235352,-10374.036133,-14882.794922,-15816.608398,},
		{-5935.801758,-9375.464844,-7638.791992,-5136.500488,-7040.490723,-7671.661621,},
		{-11560.222656,-18313.509766,-16136.364258,-9507.951172,-13600.947266,-13958.875000,},
		{-16550.082031,-26153.199219,-21062.589844,-14385.735352,-19704.214844,-21577.628906,},
	};
	const matrix::SquareMatrix<float, M> expected(expected_data);

	matrix::SquareMatrix<float, M> result = kf.compute_state_covariance_estimation(p, k, h);

	compare_matrix("state covariance estimation", expected, result, M, M, FLOAT_PRECISION);

	return true;
}


bool KalmanTest::run_tests()
{
	ut_run_test(kalman_init_test);
	ut_run_test(compute_matrix_A_test);
	ut_run_test(compute_matrix_B_test);
	ut_run_test(compute_phi_test);
	ut_run_test(compute_q_test);
	ut_run_test(predict_x_test);
	ut_run_test(predict_phi_test);
	ut_run_test(compute_kalman_gain_test);
	ut_run_test(compute_state_estimation_test);
	ut_run_test(compute_state_covariance_estimation_test);

	return (_tests_failed == 0);
}

ut_declare_test(kalman_test, KalmanTest)
